class Solution {
    // Function to get the maximum number in the array
    private static int getMax(int arr[], int n) {
        int max = arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
    
    // Function to perform counting sort based on a specific digit
    private static void countingSort(int arr[], int n, int exp) {
        int[] output = new int[n]; // Output array
        int[] count = new int[10]; // Count array for digits (0 to 9)
        
        // Initialize count array
        for (int i = 0; i < 10; i++) {
            count[i] = 0;
        }
        
        // Store count of occurrences of each digit in count[]
        for (int i = 0; i < n; i++) {
            count[(arr[i] / exp) % 10]++;
        }
        
        // Change count[i] so that count[i] contains the actual position of this digit in output[]
        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }
        
        // Build the output array
        for (int i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }
        
        // Copy the output array to arr[], so that arr[] contains sorted numbers according to the current digit
        for (int i = 0; i < n; i++) {
            arr[i] = output[i];
        }
    }
    
    // Function to perform radix sort
    static void radixSort(int arr[], int n) {
        // Find the maximum number to know the number of digits
        int max = getMax(arr, n);
        
        // Apply counting sort to sort elements based on place value
        for (int exp = 1; max / exp > 0; exp *= 10) {
            countingSort(arr, n, exp);
        }
    }
}
