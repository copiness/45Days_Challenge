class Solution
{
    //Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int nums[])
    {
        // Code here
        
        int n = nums.length;
        List<Pair> v = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            v.add(new Pair(nums[i], i));
        }
        
        v.sort((p1, p2) -> Integer.compare(p1.value, p2.value));
        
        boolean[] visited = new boolean[n];
        int swaps = 0;
        
        for (int i = 0; i < n; i++) {
            if (visited[i] || v.get(i).index == i) {
                continue;
            }
            
            int cycleSize = 0;
            int j = i;
            
            while (!visited[j]) {
                visited[j] = true;
                j = v.get(j).index;
                cycleSize++;
            }
            
            if (cycleSize > 0) {
                swaps += (cycleSize - 1);
            }
        }
        
        return swaps;
    }
    
    class Pair {
        int value, index;
        
        Pair(int value, int index) {
            this.value = value;
            this.index = index;
        }
    }
}
